@model WebApp.ViewModels.LifecycleUpdateViewModel;

@{
    ViewData["Title"] = "_UpdateFields";
    List<SelectListItem> statusList = new List<SelectListItem>();
    if (Model.DropCouponStatus != null)
    {
        statusList = Model.DropCouponStatus;
    }

    List<SelectListItem> enabledList = new List<SelectListItem>();
    if (Model.DropEnabled != null)
    {
        enabledList = Model.DropEnabled;
    }
}

<!-- form controls -->
    <div class="row">
        <div class="input-field col s2">
            @Html.EditorFor(p => p.Customer, new { htmlAttributes = new { @type = "text", placeholder = "-not selected-", @class = "white input-coupon", @autocomplete = "off", @data_modal = "customer", dataVal = true } })
            @Html.LabelFor(p => p.Customer)
            @Html.ValidationMessageFor(p => p.Customer)
            <i class='material-icons suffix validation-error'>warning</i>
        </div>
        <div class="input-field date col s2">
            @Html.EditorFor(p => p.ValidTo, "", new { htmlAttributes = new { @class = "white calendar input-coupon", @type = "text", placeholder = "-not selected-", @autocomplete = "off", @data_modal = "validto", dataVal = true } })
            @Html.LabelFor(p => p.ValidTo, new { htmlAttributes = new { @class = "" } })
            @Html.ValidationMessageFor(p => p.ValidTo)
            <i class='material-icons suffix validation-error'>warning</i>
        </div>
        <div class="input-field col s2">
            @Html.LabelFor(p => p.SelectedEnabled, new { @class = "active", @for = "SelectedEnabled" })
            @Html.DropDownListFor(p => p.SelectedEnabled, enabledList, "-- option --", new { @class = "input-coupon select-coupon", @data_modal = "enabled", @data_type = "select", @data_id = "Enabled" })
        </div>
        <div class="input-field col s2">
            @Html.LabelFor(p => p.SelectedCouponStatus, new { @class = "active", @for = "SelectedCouponStatus" })
            @Html.DropDownListFor(p => p.SelectedCouponStatus, statusList, "-- option --", new { @class = "input-coupon select-coupon", @data_modal = "status", @data_type = "select", @data_id = "Select" })
        </div>
        <!-- action to call confirmation modal -->
        <div class="input-field col s4 u-p-r-remove">
            <button id="modal-trigger" type="button" class="waves-effect waves-light btn-flat btn-primary right modal-trigger" href="#modal-confirmation" data-position="bottom" data-tooltip="@ViewBag.CommandMessage" disabled>
                <i class="material-icons left">update</i>
                @CouponDatabase.Properties.Resources.Btn_UpdateSelected
                <span id="coupon-number"></span>
            </button>
        </div>
        <!-- action to call confirmation modal -->
    </div>
<!-- /form controls -->
<!-- confirmation modal -->
<partial name="_CouponsModal" />
<!-- /confirmation modal -->

<script>
    $(document).ready(function () {
        // update button logic for state style
        var btn = $("#modal-trigger");
        var trigger = $("#modal-action");
        var status = '@ViewBag.CommandStatus';

        var initContent = btn.html();
        var loadingContent = '<i class="material-icons loading u-m-l-lg u-m-r-lg">autorenew</i>';
        var successContent = '<i class="material-icons u-m-l-lg u-m-r-lg">check</i>';
        var errorContent = '<i class="material-icons u-m-l-lg u-m-r-lg">warning</i>';

        // change style when form submitted from modal
        trigger.click(function () {
            btn.html(loadingContent)
        });
        console.log("["+status+"]")

        // check status and change style
        if (typeof status == 'number' && status == 0) {
            btn.html(errorContent);
            btn.addClass("error");
            btn.tooltip();
        } else if (status == 1) {
            btn.html(successContent);
            btn.addClass("success");
            btn.tooltip();
        }

        // reverse style - will reverse if filter is used as well
        $("input").click(reverseBtn)

        function reverseBtn() {
            if (typeof status == 'number') {
                status = null;
                btn.tooltip("destroy");
                btn.html(initContent);
                btn.removeClass("btn-success btn-error");
            }
        }
    })

</script>