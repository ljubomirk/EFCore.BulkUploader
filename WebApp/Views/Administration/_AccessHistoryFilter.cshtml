@*
    ROLE: displays access history search filter and handles posting data to controller
*@
@model WebApp.ViewModels.AccessHistoryFilters;

<div id="form-filter">
    @using (Html.BeginForm("FilteredListAccessHistory", "Administration", FormMethod.Post, new { @class = "form-filter", role = "form", id = "AccessHistoryFilters", hidden = true }))
    {
        <div class="container">
            <div class="row u-m-t-md">
                <div class="col s12 m4">
                    <p class="section-headline">@Html.DisplayNameFor(f => f.ApplicationTypes)</p>
                    <p>
                        @for (int i = 0; i < Model.ApplicationTypes.Count; i++)
                        {
                            <label class="u-m-r-md">
                                @Html.CheckBoxFor(c => c.ApplicationTypes[i].Checked, new { @class = "filled-in", @autocomplete = "off" })
                                <span>@Html.DisplayFor(c => c.ApplicationTypes[i].Label, new { @class="checkbox-hover checkbox-hover__inline" })</span>
                                @Html.HiddenFor(c => c.ApplicationTypes[i].Id)
                                @Html.HiddenFor(c => c.ApplicationTypes[i].Label)
                            </label>
                        }
                    </p>
                </div>
                <div class="col s12 m4 u-p-l-remove">
                    <p class="section-headline">@Html.DisplayNameFor(f => f.AccessGrants)</p>
                    <p>
                        @for (int i = 0; i < Model.AccessGrants.Count; i++)
                        {
                            <label class="u-m-r-md">
                                @Html.CheckBoxFor(c => c.AccessGrants[i].Checked, new { @class = "filled-in", @autocomplete = "off" })
                                <span>@Html.DisplayFor(c => c.AccessGrants[i].Label, new { @class = "checkbox-hover checkbox-hover__inline" })</span>
                                @Html.HiddenFor(c => c.AccessGrants[i].Id)
                                @Html.HiddenFor(c => c.AccessGrants[i].Label)
                            </label>
                        }
                </div>
            </div>
            <div class="row u-m-t-xl u-m-l-sm-negative">
                <div class="input-field date col s12 m4">
                    @Html.EditorFor(p => p.AccessFrom, new { htmlAttributes = new { @type = "text", placeholder = "", @autocomplete = "off", dataVal = true } })
                    @Html.LabelFor(p => p.AccessFrom, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.AccessFrom)
                    <i class='material-icons suffix validation-error'>warning</i>
                    <i class='material-icons suffix date-icon'>event</i>
                </div>
                <div class="input-field date col s12 m4">
                    @Html.EditorFor(p => p.AccessTo, new { htmlAttributes = new { @type = "text", placeholder = "", @autocomplete = "off", dataVal = true } })
                    @Html.LabelFor(p => p.AccessTo, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.AccessTo)
                    <i class='material-icons suffix validation-error'>warning</i>
                    <i class='material-icons suffix date-icon'>event</i>
                </div>
            </div>
            <div class="row">
                <div class="col s12 u-p-l-remove">
                    <button id="btn-submit" type="submit" data-position="bottom" class="waves-effect waves-light btn-flat btn-primary u-m-r-md">
                        <i class="material-icons left">check</i>
                        @CouponDatabase.Properties.Resources.Btn_ApplyFilters
                    </button>
                    <a class="waves-effect waves-light btn-flat btn-transparent" id="filter-close">
                        @CouponDatabase.Properties.Resources.Btn_Cancel
                    </a>
                </div>
            </div>
        </div>
    }
</div>

<script>
    $(document).ready(function () {

        // toggle filter on master filter button
        $("#btn-filter").click(function () {
            $(".form-filter").slideToggle("slow");
            var filterState = $("#btn-filter").hasClass('btn-transparent');
            if (filterState) {

                $("#btn-filter").removeClass('btn-transparent');
                $("#btn-filter i").html('unfold_more');
                sessionStorage.setItem("FilterStatus", false);
            } else {
                $("#btn-filter").addClass('btn-transparent');
                $("#btn-filter i").html('unfold_less');
            }
        });

        // close filter
        $("#filter-close").click(function () {
            $(".form-filter").slideUp("slow");
            $("#btn-filter").removeClass('btn-transparent');
            $("#btn-filter i").html('unfold_more');
        })
    })

</script>