@*
    ROLE: displays form for coupon series and handles form data for posting to controller
*@

@model WebApp.ViewModels.CouponSeriesViewModel;

<div class="container">
    <div class="row">
        <div class="col s12 m6">
            <h4 class="u-m-t-remove">
                @CouponDatabase.Properties.Resources.CouponSeries_TitleCreate
            </h4>
        </div>
        <div class="col s12 m6 u-p-r-md-2">
            <a href="@Url.Action("ListPromotions", "Management")" class="waves-effect waves-light btn-flat btn-default commando-primary-text right">
                @CouponDatabase.Properties.Resources.Btn_Cancel
                <i class="material-icons right">clear</i>
            </a>
        </div>
    </div>
</div>

@using (Html.BeginForm("GenerateCoupons", "Management", FormMethod.Post, new { role = "form", id = "PromotionForm", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(p => p._promo.Id)

    <div class="form-box">
        <div class="container">
            <!-- top form return msg -->
            @if (ViewBag.Command != null)
            {
                <div class="@((int)ViewBag.Command.Status != 0 ? "form-box__msg form-box__msg-error" : "form-box__msg form-box__msg-success")">@ViewBag.Command.Message</div>
            }
            <div class="row u-m-b-remove">
                <div class="row">
                    <div class="input-field col s6">
                        <input placeholder="" id="serialNumber" type="text" value="#@Model.CouponSeries" disabled>
                        @Html.LabelFor(p => p.CouponSeries, new { htmlAttributes = new { @class = "active" } })
                        @Html.HiddenFor(p => p.CouponSeries)
                    </div>
                </div>
                <div class="input-field date col s6">
                    @Html.EditorFor(p => p.AssignableFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true } })
                    @Html.LabelFor(p => p.AssignableFrom, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.AssignableFrom)
                    <i class='material-icons suffix validation-error'>warning</i>
                    <i class='material-icons suffix date-icon'>event</i>
                </div>
                <div class="input-field date col s6">
                    @Html.EditorFor(p => p.AssignableUntil, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true } })
                    @Html.LabelFor(p => p.AssignableUntil, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.AssignableUntil)
                    <i class='material-icons suffix validation-error'>warning</i>
                    <i class='material-icons suffix date-icon'>event</i>
                </div>
                <div class="input-field date col s6 u-m-b-remove">
                    @Html.EditorFor(p => p.RedeemableFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true } })
                    @Html.LabelFor(p => p.RedeemableFrom, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.RedeemableFrom)
                    <i class='material-icons suffix validation-error'>warning</i>
                    <i class='material-icons suffix date-icon'>event</i>
                </div>
                <div class="input-field date col s6 u-m-b-remove">
                    @Html.EditorFor(p => p.RedeemableUntil, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true } })
                    @Html.LabelFor(p => p.RedeemableUntil, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.RedeemableUntil)
                    <i class='material-icons suffix validation-error'>warning</i>
                    <i class='material-icons suffix date-icon'>event</i>
                </div>
            </div>
            <div class="row">
                <div class="col s12">
                    <p class="section-headline u-m-t-remove">@CouponDatabase.Properties.Resources.Coupon_RequestedStatus</p>
                    <div class="radio-buttons-wrapper">
                        <input type="radio" class="radio-button-group" name="currentStatus" value="1" id="button1" onclick="updateCouponStatus(this.value)" checked />
                        <label for="button1">@CouponDatabase.Lifecycle.CouponStatus.Created.ToString()</label>
                         <input type="radio" class="radio-button-group" name="currentStatus" value="2" id="button2" onclick="updateCouponStatus(this.value)" />
                        <label for="button2">@CouponDatabase.Lifecycle.CouponStatus.Issued.ToString()</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="3" id="button3" onclick="updateCouponStatus(this.value)" />
                        <label for="button3">@CouponDatabase.Lifecycle.CouponStatus.Redeemed.ToString()</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="4" id="button4" onclick="updateCouponStatus(this.value)" />
                        <label for="button4">@CouponDatabase.Lifecycle.CouponStatus.Canceled.ToString()</label>
                    </div>
                    @Html.HiddenFor(i => i.Status, new { @Value = (int)Model.Status })
                </div>
            </div>
            <div class="row">
                @if (Model.MaximumRedeem.HasValue)
                {
                    <div class="col s6"  style="white-space:nowrap">
                        <button type="button" class="waves-effect waves-light btn-flat btn-default btn-subtract commando-primary-text left u-m-t-md-btnGroup"><i class="material-icons">remove</i></button>
                        <div class="input-field col s4" >
                            @Html.EditorFor(p => p.MaximumRedeem, new { htmlAttributes = new { @type = "number", placeholder = "", @autocomplete = "off", dataVal = true, min = 1, max = 1000 } })
                            @Html.LabelFor(p => p.MaximumRedeem, new { htmlAttributes = new { @class = "active" } })
                            @Html.ValidationMessageFor(p => p.MaximumRedeem)
                            <i class='material-icons suffix validation-error'>warning</i>
                        </div>
                        <button type="button" class="waves-effect waves-light btn-flat btn-default btn-add commando-primary-text u-m-l-sm u-m-t-md-btnGroup"><i class="material-icons">add</i></button>
                    </div>
                }
                else
                {
                    <div class="col s6"  style="white-space:nowrap">
                        <button type="button" class="waves-effect waves-light btn-flat btn-default btn-subtract commando-primary-text left u-m-t-md-btnGroup" disabled><i class="material-icons">remove</i></button>
                        <div class="input-field col s4">
                            @Html.EditorFor(p => p.MaximumRedeem, new { htmlAttributes = new { @value = "1", @type = "number", placeholder = "1", @autocomplete = "off", dataVal = true, @readonly = true } })
                            @Html.LabelFor(p => p.MaximumRedeem, new { htmlAttributes = new { @class = "active" } })
                            @Html.ValidationMessageFor(p => p.MaximumRedeem)
                            <i class='material-icons suffix validation-error'>warning</i>
                        </div>
                        <button type="button" class="waves-effect waves-light btn-flat btn-default btn-add commando-primary-text u-m-l-sm u-m-t-md-btnGroup" disabled><i class="material-icons">add</i></button>
                    </div>
                }
            </div>
            <!-- options -->
            <div class="row">
                <div class="col s12">
                    <div class="nav-extended">
                        <div class="nav-content">
                            <ul class="tabs-section tabs-transparent tabs-coupons">
                                <li id="tab-init" class="tab first tab-coupon"><a class="active" href="#coupon-generate">Generate</a></li>
                                <li class="tab last tab-coupon"><a href="#coupon-import">Import</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /options -->
            <!-- generate form -->
            <partial name="_SeriesGenerate" />

            <!-- import form -->
            <partial name="_SeriesImport" />

        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $(".btn-subtract").click(function () {
            var input = $(this).next(".input-field").children("input");
            var inputVal = input.val();
            var min = input.attr('min');
            var max = input.attr('max');
            if (inputVal == "" || input == 1) {
                input.val(1);
            } else if (parseInt(inputVal) > min && parseInt(inputVal) <= max) {
                input.val(parseInt(inputVal) - 1);
            }
        });

        $(".btn-add").click(function () {
            var input = $(this).prev(".input-field").children("input");
            var inputVal = input.val();
            var min = input.attr('min');
            var max = input.attr('max');
            if (inputVal == "") {
                input.val(1);
            } else if (parseInt(inputVal) >= min && parseInt(inputVal) < max) {
                input.val(parseInt(inputVal) + 1);
            }
        });

        $("input[type='radio']:checked").each(function (i, e) {
            $("#Status").val(e.value);
        })

        $("button[type='submit']").click(function (e) {
            if ($(".update-icon").hasClass("loading")) {
                e.preventDefault();
                return;
            }
            $(".update-icon").addClass("loading").html("autorenew");
        })

        $("#AssignableFrom").calendar({}).on('changeDate', function (selected) {
            var minDate = new Date(selected.date.valueOf());
            $('#AssignableUntil').calendar('setStartDate', minDate);
            $('#AssignableUntil').calendar('setDate', "");
        });

        $("#RedeemableFrom").calendar({}).on('changeDate', function (selected) {
            var minDate = new Date(selected.date.valueOf());
            $('#RedeemableUntil').calendar('setStartDate', minDate);
            $('#RedeemableUntil').calendar('setDate', "");
        });

    });


    function updateCouponStatus(val) {
        $("#Status").val(val);
    }



</script>