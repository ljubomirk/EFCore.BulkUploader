@model WebApp.ViewModels.CouponList;
@using CouponDatabase.Lifecycle;
@{
    ViewData["Title"] = "LifecycleTable";
}

<!-- coupon table -->
<table data-nosort-target="0" id="coupon-list" class="striped highlight">
    <thead>
        <tr>
            <th>
                <label>
                    <input id="checkbox-master" type="checkbox" class="filled-in" />
                    <span></span>
                </label>
            </th>
            <th>
                @Html.DisplayNameFor(m => m.Coupon.Code)
                <img src="~/images/sorting_hidden.png" class="sorting-icon" />
            </th>
            <th>
                @Html.DisplayNameFor(m => m.Coupon.Holder)
                <img src="~/images/sorting_hidden.png" class="sorting-icon" />
            </th>
            <th>
                @Html.DisplayNameFor(m => m.Coupon.User)
                <img src="~/images/sorting_hidden.png" class="sorting-icon" />
            </th>
            <th>
                @Html.DisplayNameFor(m => m.Coupon.Status)
                <img src="~/images/sorting_hidden.png" class="sorting-icon" />
            </th>
            <th>
                @Html.DisplayNameFor(m => m.Coupon.Active)
                <img src="~/images/sorting_hidden.png" class="sorting-icon" />
            </th>
        </tr>
    </thead>

    <tbody>
        <button type="submit">TEST FORM SUBMIT</button>
        <p>@Html.DisplayNameFor(m => m.CouponItems)</p>
        @for (int i = 0; i < Model.CouponItems.Count; i++)
        {
            string statusText = ((CouponStatus)Model.CouponItems[i].Status).ToString();
            <tr>
                <td>
                    @*<label>

            <input id="@Model.CouponItems[i].Id" type="checkbox" class="filled-in checkbox-coupon" />
            <span></span>
        </label>*@
                    <label>
                        @Html.CheckBoxFor(c => Model.CouponItems[i].Checked, new { @class = "filled-in checkbox-coupon" })
                        <span>@Html.DisplayFor(c => Model.CouponItems[i].Id)</span>
                    </label>
                </td>
                <td>@Html.DisplayFor(item => item.CouponItems[i].Code)</td>
                <td>@Html.DisplayFor(item => item.CouponItems[i].Code)</td>
                <td>@Html.DisplayFor(item => item.CouponItems[i].Code)</td>
                <td>@Html.DisplayFor(item => statusText)</td>
                <td>
                    @if (Model.CouponItems[i].Active)
                    {
                        <i class="material-icons">check</i>
                    }
                </td>
            </tr>
        }

        @*@foreach (var c in Model.CouponItems)
        {
            string statusText = ((CouponStatus)c.Status).ToString();
            <tr>
                <td>
                    <label>
                        <input id="@c.Id" type="checkbox" class="filled-in checkbox-coupon" />
                        <span></span>
                    </label>
                </td>
                <td>@Html.DisplayFor(item => c.Code)</td>
                <td>@Html.DisplayFor(item => c.Holder)</td>
                <td>@Html.DisplayFor(item => c.User)</td>
                <td>@Html.DisplayFor(item => statusText)</td>
                <td>
                    @if (c.Active)
                    {
                        <i class="material-icons">check</i>
                    }
                </td>
            </tr>
        }*@
    </tbody>
</table>
<!-- /coupon table -->

<script src="~/js/datatables.js" asp-append-version="true"></script>
<script>
    $(document).ready(function () {

        // check changes on update params, update modal text and enable action
        $(".input-coupon").change(enableModalTrigger);
        // display number of checked items and enable action
        $(".checkbox-coupon").change(function () {
            var num = getChecked();
            setMaterCheckbox(num);
            enableModalTrigger();
        })

        // handle chekcbox status
        // checkbox: MASTER
        $("#checkbox-master").on('click', function (e) {
            var chkMaster = $(this);
            var chkBoxes = $(".checkbox-coupon");

            $(this).prop("indeterminate", false).change();
            // set class if changed
            if (chkMaster.hasClass("filled-in-indeterminate")) {
                chkMaster.removeClass("filled-in-indeterminate")
                chkMaster.addClass("filled-in");
            }
            // check state and set all other chkboxes
            if (chkMaster.is(":checked")) {
                chkBoxes.each(function () {
                    if (!$(this).prop("checked")) {
                        $(this).prop("checked", true);
                    }
                })
            } else {
                chkBoxes.each(function () {
                    if ($(this).prop("checked")) {
                        $(this).prop("checked", false);
                    }
                })
            }

            var num = $("input:checked.checkbox-coupon").length;
            if (num > 0) {
                $("#coupon-number").text('(' + num + ')');
                $("#coupon-number-modal").text(num);
            } else {
                $("#coupon-number").text('');
                $("#coupon-number-modal").text('');
            }
            enableModalTrigger();
        })

        // enable or disable action button (_CouponsFilter)
        function enableModalTrigger() {
            var btn = $("#modal-trigger");
            var inputVal = getInputs();
            var chkVal = getChecked();

            if (inputVal > 0 && chkVal > 0) {
                btn.removeAttr("disabled")
            } else {
                btn.attr("disabled", true);
            }
        }

        // handle master checkbox status
        function setMaterCheckbox(curr) {
            var chkMaster = $("#checkbox-master");
            var max = $("input.checkbox-coupon").length;
            // if all checked
            if (curr == max) {
                chkMaster.prop("indeterminate", false);

                if (chkMaster.hasClass("filled-in-indeterminate")) {
                    chkMaster
                        .removeClass("filled-in-indeterminate")
                        .addClass("filled-in");
                }
                chkMaster.prop("checked", true);
                // if some cheked
            } else if (curr > 0 && curr < max) {
                chkMaster.prop("indeterminate", true);

                if (chkMaster.hasClass("filled-in")) {
                    chkMaster
                        .removeClass("filled-in")
                        .addClass("filled-in-indeterminate");
                }
                chkMaster.prop("checked", false);
                // if none checked
            } else {
                chkMaster.prop("indeterminate", false);

                if (chkMaster.hasClass("filled-in-indeterminate")) {
                    chkMaster
                        .removeClass("filled-in-indeterminate")
                        .addClass("filled-in");
                }
                chkMaster.prop("checked", false);

            }
        }

        // get number of checked items
        function getChecked() {
            return $("input:checked.checkbox-coupon").length;
        }
        // get number of input items that have value
        function getInputs() {
            return $(".input-coupon").filter(function () {
                return $(this).val();
            }).length
        }
    });

</script>