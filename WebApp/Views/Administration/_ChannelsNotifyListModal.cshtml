@model ExternalSystemsViewModel;
@{
    string action = (Model.DropChannels.Count() == 1 ? "UpdateNotifyList" : "AddNotifyList");
    string headline = (Model.DropChannels.Count() == 1 ? @CouponDatabase.Properties.Resources.Modal_HeadingEditANotifyList : @CouponDatabase.Properties.Resources.Modal_HeadingAddToNotifyList);
    string btnLabel = (Model.DropChannels.Count() == 1 ? @CouponDatabase.Properties.Resources.Btn_Edit : @CouponDatabase.Properties.Resources.Btn_AddToNotifyList);

    List<SelectListItem> channelList = new List<SelectListItem>();
    if (Model.DropChannels != null)
    {
        channelList = Model.DropChannels;
    }

    List<SelectListItem> systemList = new List<SelectListItem>();
    if (Model.DropSystems != null)
    {
        systemList = Model.DropSystems;
    }

}

<!-- form modal -->
@using (Html.BeginForm(action, "Administration", FormMethod.Post, new { role = "form", id = "NotifyListModal" }))
{
    @*@Html.HiddenFor(nl => nl.System.Id)
    @Html.HiddenFor(nl => nl.Channel.Id)*@
    <div id="modal-notify-list" class="modal">
        <div class="modal-content">
            <h4>@headline</h4>
            <div class="row u-m-t-lg">
                <div class="input-field col s12">
                    @Html.LabelFor(p => p.Channels, new { @class = "active", @for = "Channels" })
                    @Html.DropDownListFor(p => p.Channels, channelList, "-- option --", new { @class = "dropdown", dataVal = true })
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
                <div class="input-field col s12">
                    @Html.LabelFor(p => p.Systems, new { @class = "active", @for = "Systems" })
                    @Html.DropDownListFor(p => p.Systems, systemList, "-- option --", new { @class = "dropdown", dataVal = true })
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
                @*<div class="input-field col s12">
                    @Html.EditorFor(s => s.Url, new { @type = "text", @autocomplete = "off", dataVal = true, htmlAttributes = new { placeholder = "" } })
                    @Html.LabelFor(s => s.Url, new { @class = "active" })
                    @Html.ValidationMessageFor(s => s.Url)
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>*@
            </div>
        </div>
        <div class="modal-footer">
            <a class="modal-close waves-effect waves-light btn-flat btn-transparent u-m-r-md">
                @CouponDatabase.Properties.Resources.Btn_Close
            </a>
            <button type="submit" class="modal-close waves-effect waves-green btn-flat btn-primary">
                <i class="material-icons left">check</i>
                @btnLabel
            </button>
        </div>
    </div>
}
<!-- /form modal-->