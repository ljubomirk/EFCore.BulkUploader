@*
    * TODO:
    *   client validation
    *   model validation
    *   CheckItems dynamic rendering
*@
@model WebApp.ViewModels.PromotionDetailsViewModel;

@{
    ViewData["Title"] = "Promotion Details";

    // initial state
    string strTitle = CouponDatabase.Properties.Resources.Promotion_TitleCreate;
    string strBtnCancel = CouponDatabase.Properties.Resources.Btn_Cancel;
    string hasEndDateChk = ""; // checkbox for date picker
    string hasEndDate = "disabled"; // ValidTo date picker - used as a className


    if (Model.Promotion.Id != 0)
    {
        strTitle = @CouponDatabase.Properties.Resources.Promotion_TitleEdit;
        strBtnCancel = CouponDatabase.Properties.Resources.Btn_Back;

        // if there is an end date, this will enable date input field and check checkbox
        if (Model.Promotion.ValidTo != null)
        {
            hasEndDate = "";
            hasEndDateChk = "checked";
        }
    }
}

@using (Html.BeginForm("SavePromotion", "Management", FormMethod.Post, new { role = "form", id = "PromotionForm" }))
{
    @Html.HiddenFor(p => p.Promotion.Id)

    <!-- header -->
    <div class="container">
        <div class="row">
            <h4>
                @strTitle
                <a href="@Url.Action("ListPromotions", "Management")" class="waves-effect waves-light btn-flat btn-default right">@strBtnCancel<i class="material-icons right">clear</i></a>
            </h4>
        </div>
    </div>
    <!-- /header -->

    <!-- form -->
    <div class="form-box">
        <div class="container">
            <!-- top form return msg -->
            <div class="@(ViewBag.CommandStatus == "[ERROR]" ? "form-box__msg form-box__msg-error" : "form-box__msg form-box__msg-success") @(ViewBag.CommandStatus == null ? "hiddendiv" : "")">@ViewBag.CommandStatus  @ViewBag.CommandMessage</div>

            <!-- input fields -->
            <div class="row">
                <div class="row">
                    <div class="input-field date col s6">
                        @Html.EditorFor(p => p.Promotion.Code, new { htmlAttributes = new { @class = "validate", @type = "text", placeholder = "", @required = "required" } })
                        @Html.LabelFor(p => p.Promotion.Code, new { htmlAttributes = new { @class = "active" } })
                        @*<i class="material-icons suffix validation-error" data-position="bottom" data-tooltip="yo, škagre!">warning</i>*@
                    </div>
                    <div class="input-field col s6">
                        <div class="switch right u-m-t-sm">
                            <label>
                                Disabled
                                @Html.CheckBoxFor(p => p.Promotion.Enabled)
                                <span class="lever"></span>
                                Enabled
                            </label>
                        </div>
                    </div>
                </div>
                <div class="input-field col s6">
                    @Html.EditorFor(p => p.Promotion.ValidFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @required = "required" } })
                    @Html.LabelFor(p => p.Promotion.ValidFrom, new { htmlAttributes = new { @class = "active" } })
                    <i class="material-icons suffix">event</i>
                </div>
                <div class="input-field col s6">
                    <!--a bit of a hack just to add disabled in htmlAttr...-->
                    @if (hasEndDate != "disabled")
                    {
                        @Html.EditorFor(p => p.Promotion.ValidTo, new { htmlAttributes = new { @class = "calendar", @type = "text", @id = "ValidTo", placeholder = "" } })
                    }
                    else
                    {
                        @Html.EditorFor(p => p.Promotion.ValidTo, new { htmlAttributes = new { @class = "calendar", @type = "text", @id = "ValidTo", placeholder = "", @disabled = true } })
                    }
                    @Html.LabelFor(p => p.Promotion.ValidTo, new { htmlAttributes = new { @class = "active" } })
                    <i id="icon-endDate" class="material-icons suffix @hasEndDate">event</i>
                </div>
                <div class="col s12">
                    <p class="u-m-t-remove">
                        <label id="chk-endDate">
                            <input type="checkbox" class="filled-in" @hasEndDateChk />
                            <span>@CouponDatabase.Properties.Resources.Promotion_SetEndDateChkLabel</span>
                        </label>
                    </p>
                </div>
            </div>
            <!-- /input fields -->

            <!-- checkboxes -->
            <div class="row">
                <!-- IssuerChannels -->
                <div class="col s6">
                    <p class="section-headline">@Html.DisplayNameFor(m => m.IssuerChannels)</p>
                    @for (int i = 0; i < Model.IssuerChannels.Count; i++)
                    {
                        <p class="checkbox-hover">
                            <label>
                                @Html.CheckBoxFor(c => c.IssuerChannels[0].Checked, new { @class = "filled-in" })
                                <span>@Html.DisplayFor(c => c.IssuerChannels[i].Label)</span>
                            </label>
                        </p>
                    }
                </div>
                <!-- /IssuerChannels -->
                <!-- AwardChannels -->
                <div class="col s6">
                    <p class="section-headline">@Html.DisplayNameFor(m => m.AwardChannels)</p>
                    @for (int i = 0; i < Model.AwardChannels.Count; i++)
                    {
                        <p class="checkbox-hover">
                            <label>
                                @Html.CheckBoxFor(c => c.AwardChannels[0].Checked, new { @class = "filled-in" })
                                <span>@Html.DisplayFor(c => c.AwardChannels[i].Label)</span>
                            </label>
                        </p>
                    }
                </div>
                <!-- /AwardChannels -->
                <!-- Properties -->
                <div class="col s12">
                    <p class="section-headline u-m-b-remove">@Html.DisplayNameFor(m => m.Properties)</p>
                </div>
                <div class="col s12 two-cols">
                    @for (int i = 0; i < Model.Properties.Count; i++)
                    {
                        <p class="checkbox-hover">
                            <label>
                                @Html.CheckBoxFor(c => c.Properties[0].Checked, new { @class = "filled-in" })
                                <span>@Html.DisplayFor(c => c.Properties[i].Label)</span>
                            </label>
                        </p>
                    }
                </div>
                <!-- /Properties -->
            </div>
            <!-- /checkboxes -->

            <!-- actions -->
            <div class="row">
                <div class="col s12">
                    @if (Model.Promotion.Id == 0)
                    {
                        <button type="submit" class="waves-effect waves-light btn-flat commando-primary white-text u-m-r-md">
                            <i class="material-icons left">check</i>
                            @CouponDatabase.Properties.Resources.Btn_Create
                        </button>
                        <a href="@Url.Action("AddCouponSeries","Management")" class="waves-effect waves-light btn-flat btn-default-primary">
                            <i class="material-icons left">arrow_forward</i>
                            @CouponDatabase.Properties.Resources.Btn_CreateAndAddSeries
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Action("AddCouponSeries","Management")" class="waves-effect waves-light btn-flat commando-primary white-text u-m-r-md">
                            <i class="material-icons left">add</i>
                            @CouponDatabase.Properties.Resources.Btn_AddSeries
                        </a>
                        <button type="submit" class="waves-effect waves-light btn-flat btn-default btn-primary-text">
                            <i class="material-icons left">save</i>
                            @CouponDatabase.Properties.Resources.Btn_SaveChanges
                        </button>
                        <a href="@Url.Action("EditPromotion","Management", new { id = Model.Promotion.Id })" class="waves-effect waves-light btn-flat btn-danger right">
                            <i class="material-icons left">undo</i>
                            @CouponDatabase.Properties.Resources.Btn_ResetChanges
                        </a>
                    }
                </div>
            </div>
            <!-- /actions -->
        </div>
    </div>
    <!-- /form -->
}

<script src="~/js/calendar.js" asp-append-version="true"></script>
<script>
    $(document).ready(function () {
        
            var object = @(Html.Raw(Json.Serialize(Model)));
            console.log(object);
        // init date picker
        $('.calendar').calendar().change(function (e) {
            // validate date format
            // TODO: regex should be changed depending on locale

            var input = $(this);
            var re = /^[0-9]{2}.[0-9]{2}.[0-9]{4}$/;
            var valid = re.test(e.target.value);
            if (valid) {
                input.removeClass("invalid").addClass("valid");
            }
            else {
                input.removeClass("valid").addClass("invalid");
            }

        });

        // enable end date input field
        $("label#chk-endDate").click(function () {
            if ($("input", this).prop("checked")) {
                $("#ValidTo").attr("disabled", false);
                $("#icon-endDate").removeClass("disabled");
            } else {
                $("#ValidTo").val("");
                $("#ValidTo").removeClass("valid invalid");
                $("#ValidTo").attr("disabled", true);
                $("#icon-endDate").addClass("disabled");
            }
        })

        // enable promotion if on edit
        $("#action-enable").click(function () {
            var id = $(this).attr("data-id");
            if (id) {
                var val = $(this).attr("data-value");

                if (val == "True") val = "False";
                else val = "True";

                var url = "@Url.Action("Enable", "Management")" +
                    encodeURI("?id=" + id + "&enable=" + val);

                // wait for the automation to finish
                setTimeout(function () {
                    window.location.assign(url)
                }, 500);
            }
        })

        // emable validation tooltip message
        $('.validation-error').tooltip();

        var obj = @Html.Raw(Json.Serialize(@Model.Promotion));
        console.log(obj)
    });

</script>


