@*
    ROLE: displays form for coupon series and handles form data for posting to controller
*@

@model WebApp.ViewModels.CouponSeriesViewModel;

<div class="container">
    <div class="row">
        <div class="col s12 m6">
            <h4 class="u-m-t-remove">
                @CouponDatabase.Properties.Resources.CouponSeries_TitleCreate
            </h4>
        </div>
        <div class="col s12 m6 u-p-r-md-2">
            <a href="@Url.Action("ListPromotions", "Management")" class="waves-effect waves-light btn-flat btn-default commando-primary-text right">
                @CouponDatabase.Properties.Resources.Btn_Cancel
                <i class="material-icons right">clear</i>
            </a>
        </div>
    </div>
</div>

@using (Html.BeginForm("GenerateCoupons", "Management", FormMethod.Post, new { role = "form", id = "PromotionForm", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(p => p.PromotionId)

    <div class="form-box">
        <div class="container">
            <div class="@(ViewBag.CommandStatus == "[NOT OK]" ? "form-box__msg form-box__msg-error" : "form-box__msg form-box__msg-success") @(ViewBag.CommandStatus == null ? "hiddendiv" : "")">@ViewBag.CommandStatus  @ViewBag.CommandMessage</div>
            <div class="row u-m-b-remove">
                <div class="row">
                    <div class="input-field col s6">
                        <input placeholder="" id="serialNumber" type="text" value="#@Model.CouponSeries" disabled >
                        @Html.LabelFor(p => p.CouponSeries, new { htmlAttributes = new { @class = "active" } })
                        @Html.HiddenFor(p => p.CouponSeries)
                    </div>
                </div>
                <div class="input-field date col s6">
                    @Html.EditorFor(p => p.AssignableFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true  } })
                    @Html.LabelFor(p => p.AssignableFrom, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.AssignableFrom)
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
                <div class="input-field date col s6">
                    @Html.EditorFor(p => p.AssignableUntil, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true  } })
                    @Html.LabelFor(p => p.AssignableUntil, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.AssignableUntil)
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
                <div class="input-field date col s6 u-m-b-remove">
                    @Html.EditorFor(p => p.RedeemableFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true  } })
                    @Html.LabelFor(p => p.RedeemableFrom, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.RedeemableFrom)
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
                <div class="input-field date col s6 u-m-b-remove">
                    @Html.EditorFor(p => p.RedeemableUntil, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true  } })
                    @Html.LabelFor(p => p.RedeemableUntil, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.RedeemableUntil)
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
            </div>
            <div class="row">
                <div class="col s12">
                    <p class="section-headline u-m-t-remove">Current Status</p>
                    <div class="radio-buttons-wrapper">
                        <input type="radio" class="radio-button-group" name="currentStatus" value="1" id="button1" checked />
                        <label for="button1">Created</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="2" id="button2" />
                        <label for="button2">Issued</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="3" id="button3" disabled />
                        <label for="button3">Redeemed</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="4" id="button4" />
                        <label for="button4">Canceled</label>
                    </div>
                </div>
            </div>

            <!-- options -->
            <div class="row">
                <div class="col s12">
                    <div class="nav-extended">
                        <div class="nav-content">
                            <ul class="tabs-section tabs-transparent tabs-coupons">
                                <li id="tab-init" class="tab first tab-coupon"><a class="active" href="#coupon-generate">Generate</a></li>
                                <li class="tab last tab-coupon"><a href="#coupon-import">Import</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /options -->
            <!-- generate form -->
            <partial name="_SeriesGenerate" />

            <!-- import form -->
            <partial name="_SeriesImport" />

        </div>
    </div>
}

<script>
    $(document).ready(function () {

        $("button[data-position='bottom']").tooltip();

        $(".btn-subtract").click(function () {
            var input = $(this).next(".input-field").children("input");
            var inputVal = input.val();
            if (inputVal == "" || input == 0) {
                input.val(0);
            } else {
                input.val(inputVal - 1);
            }
        });

        $(".btn-add").click(function () {
            var input = $(this).prev(".input-field").children("input");
            var inputVal = input.val();

            if (inputVal == "") {
                input.val(1);
            } else {
                input.val(parseInt(inputVal) + 1);
            }
        });
    });

</script>