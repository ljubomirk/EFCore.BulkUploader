@model WebApp.ViewModels.LifecycleUpdateViewModel;

@{
    ViewData["Title"] = "_UpdateFields";
    List<SelectListItem> statusList = new List<SelectListItem>();
    if (Model.DropCouponStatus != null)
    {
        statusList = Model.DropCouponStatus;
    }

    List<SelectListItem> enabledList = new List<SelectListItem>();
    if (Model.DropEnabled != null)
    {
        enabledList = Model.DropEnabled;
    }

    List<SelectListItem> applyToList = new List<SelectListItem>();
    if (Model.DropApplyTo != null)
    {
        applyToList = Model.DropApplyTo;
    }
}

<!-- form controls -->
    <div class="row">
        <div class="input-field col s2">
            @Html.EditorFor(p => p.Customer, new { htmlAttributes = new { @type = "text", placeholder = @CouponDatabase.Properties.Resources.CustomerInput_Placeholder, @class = "white input-coupon", @autocomplete = "off", @data_modal = "customer", dataVal = true } })
            @Html.LabelFor(p => p.Customer)
            @Html.ValidationMessageFor(p => p.Customer)
            <i class='material-icons suffix validation-error'>warning</i>
        </div>
        <div class="input-field date col s2">
            @Html.EditorFor(f => f.RedeemTo, new { htmlAttributes = new { @class = "white calendar input-coupon", @type = "text", placeholder = "", @autocomplete = "off", @data_modal = "redeemto", dataVal = true } })
            @Html.LabelFor(f => f.RedeemTo, new { htmlAttributes = new { @class = "active", @for = "RedeemTo" } })
            @Html.ValidationMessageFor(p => p.RedeemTo)
            <i class='material-icons suffix validation-error'>warning</i>
            <i class='material-icons suffix date-icon'>event</i>
        </div>
        <div class="input-field col s2">
            @Html.LabelFor(p => p.SelectedEnabled, new { @class = "active", @for = "SelectedEnabled" })
            @Html.DropDownListFor(p => p.SelectedEnabled, enabledList, @CouponDatabase.Properties.Resources.DropDown_OptionNotSelectedText, new { @class = "input-coupon select-coupon", @data_modal = "enabled", @data_type = "select", @data_id = "Enabled" })
        </div>
        <div class="input-field col s2">
            @Html.LabelFor(p => p.SelectedCouponStatus, new { @class = "active", @for = "SelectedCouponStatus" })
            @Html.DropDownListFor(p => p.SelectedCouponStatus, statusList, @CouponDatabase.Properties.Resources.DropDown_OptionNotSelectedText, new { @class = "input-coupon select-coupon", @data_modal = "status", @data_type = "select", @data_id = "Select" })
        </div>
        <div class="input-field col s2">
            @Html.LabelFor(p => p.SelectedApplyTo, new { @class = "active", @for = "SelectedApplyTo" })
            @Html.DropDownListFor(p => p.SelectedApplyTo, applyToList, new { @class = "input-coupon select-coupon applyTo", @data_modal = "apply", @data_type = "select", @data_id = "ApplyTo", @id = "ApplyTo" })
        </div>
        <!-- action to call confirmation modal -->
        <div class="input-field col s2">
            @if (ViewBag.Command != null)
            {
                <button id="modal-trigger" type="button" class="waves-effect waves-light btn-flat btn-primary btn-wide @((int)ViewBag.Command.Status == 0 ? "success" : "errtxt")" href="#modal-confirmation" data-position="bottom" data-tooltip="@ViewBag.Command.Message">
                    <i class="material-icons">@(ViewBag.Command.Status == 0 ? "check" : "warning")</i>
                </button>
            }
            else
            {

                <button id="modal-trigger" type="button" class="waves-effect waves-light btn-flat btn-primary modal-trigger" href="#modal-confirmation" disabled>
                    <i class="material-icons left">update</i>
                    @CouponDatabase.Properties.Resources.Btn_UpdateSelected
                </button>
            }
        </div>
        <!-- action to call confirmation modal -->
    </div>
<!-- /form controls -->
<!-- confirmation modal -->
<partial name="_CouponsModal" />
<!-- /confirmation modal -->

<script>
    $(document).ready(function () {
        // update button logic for enable/disable style
        var btn = $("#modal-trigger");
        var strUpdate = '@CouponDatabase.Properties.Resources.Btn_UpdateSelected';
        var trigger = $("#modal-action");
        var status = '@ViewBag.Command';

        var initContent = '<i class="material-icons left">update</i>' + strUpdate;
        var loadingContent = '<i class="material-icons loading u-m-l-lg u-m-r-lg">autorenew</i>';

        // init tooltip if this is rendered after update action
        if (status != null && status.length > 0) {
            btn.tooltip(config.options.tooltips);
        }

        // change style when form submitted from modal
        trigger.click(function () {
            btn.html(loadingContent);
        });

        // set up modal when called
        btn.click(function () {
            // set number of selected coupons in header
             if ($(".applyTo option:selected").text() == "All")
                $("#coupon-number-modal").text(@Model.CouponList.CouponItems.Count());
            else
                $("#coupon-number-modal").text($("input:checked.checkbox-coupon").length);

            // set change messages according to data-type
            $(".input-coupon").each(function () {
                var val = $(this).val();
                var property = this.getAttribute("data-modal");
                var type = this.getAttribute("data-type");
                var infoVal = $("dd.info-" + property);
                var info = $(".info-" + property);

                if (val) {
                    if (type == "select") {
                        var selectId = this.getAttribute("data-id");
                        val = $('[data-id="' + selectId + '"] > option[value=' + val + ']').html();
                    }

                    info.removeClass("hiddendiv");
                    infoVal.html(val);

                } else {
                    info.addClass("hiddendiv");
                }
            })
        })

        $("#Customer").click(SetUpdateButtonEnabled)

        // reverse style - will reverse if filter is used as well
        $(".input-coupon").change(SetUpdateButtonEnabled)

        $("input").change(SetUpdateButtonEnabled)

        function SetUpdateButtonEnabled() {
            if (status != null && status.length > 0) {
                status = null;

                btn.tooltip('destroy')
                    .removeClass("success errtxt")
                    .addClass("modal-trigger")
                    .removeAttr("data-tooltip")
                    .removeAttr("data-position")
                    .html(initContent);
            }
        }


    })

</script>