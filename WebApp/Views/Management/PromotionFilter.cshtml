@using Microsoft.AspNetCore.Html;
@model WebApp.ViewModels.PromotionListViewModel;


<div id="form-filter">
    @using (Html.BeginForm("FilteredListPromotions", "Management", FormMethod.Get, new { @class = "form-filter", role = "form", id = "PromotionFilter", hidden = true }))
    {
        <div class="container">
            <div class="row u-m-t-md">
                <div class="col s12 m4 u-p-l-remove">
                    <div class="u-p-t-lg">
                        <div class="input-field">
                            @Html.EditorFor(f => f.Filter.Code, new { htmlAttributes = new { @class = "validate", @type = "text", placeholder = "", @autocomplete = "off" } })
                            @Html.LabelFor(f => f.Filter.Code, CouponDatabase.Properties.Resources.Filter_ByCode, new { @class = "active" })
                            @ValidationHelper(ViewData, "Filter.Code", false)
                        </div>
                    </div>
                </div>
                <div class="col s12 m8 u-p-l-remove">
                    <p class="section-headline">@CouponDatabase.Properties.Resources.Filter_ByState</p>
                    <p>
                        <label class="checkbox-hover checkbox-hover__inline u-m-r-md">
                            @Html.CheckBoxFor(f => f.Filter.ShowActive, new { @class = "filled-in", @autocomplete = "off" })
                            <span>@Html.DisplayNameFor(f => f.Filter.ShowActive)</span>
                        </label>
                        <label class="checkbox-hover checkbox-hover__inline">
                            @Html.CheckBoxFor(f => f.Filter.ShowInactive, new { @class = "filled-in", @autocomplete = "off" })
                            <span>@Html.DisplayNameFor(f => f.Filter.ShowInactive)</span>
                        </label>
                    </p>
                </div>
            </div>
            <div class="row u-m-t-negativ">
                <div class="col s12 u-p-l-remove">
                    <p class="section-headline">@CouponDatabase.Properties.Resources.Filter_ByProperty</p>
                </div>
                <div class="col s12 three-cols">
                    @for (int i = 0; i < Model.Filter.Properties.Count; i++)
                    {
                        <p class="checkbox-hover">
                            <label>
                                @Html.CheckBoxFor(c => c.Filter.Properties[i].Checked, new { @class = "filled-in", @autocomplete = "off" })
                                <span>@Html.DisplayFor(c => c.Filter.Properties[i].Label)</span>
                                @Html.HiddenFor(c => c.Filter.Properties[i].Id)
                                @Html.HiddenFor(c => c.Filter.Properties[i].Label)
                            </label>
                        </p>
                    }
                </div>
            </div>
            <div class="row u-m-t-xl u-m-l-sm-negative">
                <div class="input-field date col s12 m4">
                    @Html.EditorFor(p => p.Filter.ValidFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.Filter.ValidFrom, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "Filter.ValidFrom", true)
                </div>
                <div class="input-field date col s12 m4">
                    @Html.EditorFor(p => p.Filter.ValidFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.Filter.ValidFrom, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "Filter.ValidUntil", true)
                </div>
            </div>
            <div class="row">
                <div class="col s12 u-p-l-remove">
                    <button id="btn-submit" type="submit" data-position="bottom" class="waves-effect waves-light btn-flat btn-primary u-m-r-md">
                        <i class="material-icons left">check</i>
                        @CouponDatabase.Properties.Resources.Btn_ApplyFilters
                    </button>
                    <a class="waves-effect waves-light btn-flat btn-transparent" id="filter-close">
                        @CouponDatabase.Properties.Resources.Btn_Cancel
                    </a>
                </div>
            </div>
        </div>
    }
</div>

<script src="~/js/calendar.js" asp-append-version="true"></script>
<script>
    $(document).ready(function () {

        // init date picker
        $(".calendar").calendar().change(function (e) {
            // validate date format
            // TODO: regex should be changed depending on locale

            var input = $(this);
            var re = /^[0-9]{2}.[0-9]{2}.[0-9]{4}$/;
            var valid = re.test(e.target.value);
            if (valid) {
                input.removeClass("invalid").addClass("valid");
            }
            else {
                input.removeClass("valid").addClass("invalid");
            }

        });

        // close filter
        $("#filter-close").click(function () {
            $(".form-filter").slideUp("slow");
            $("#btn-filter").removeClass('btn-transparent');
            $("#btn-filter i").html('unfold_more');
        })
    });

</script>

@functions{
    /// <summary>
    /// Validation messages helper
    /// </summary>
    /// <param name="viewData">Context</param>
    /// <param name="property">Model property</param>
    /// <param name="date">Bool for date input validation</param>
    /// <returns>Icon displaying validation messages inside tooltip</returns>
    /// <remarks>If date input, it returns an icon</remarks>
    public static HtmlString ValidationHelper(ViewDataDictionary context, string property, bool date)
    {
        if (context.ModelState[property] != null && context.ModelState[property].Errors.Any())
        {
            string msg = "";
            for (int i = 0; i < context.ModelState[property].Errors.Count; i++)
            {
                msg += context.ModelState[property].Errors[i].ErrorMessage;
            }
            msg.Trim();

            return new HtmlString(@"<i class='material-icons suffix validation-error' data-position='bottom' data-tooltip='" + msg + "'>warning</i>");
        }
        else if (date)
        {
            return new HtmlString(@"<i class='material-icons suffix date-icon'>event</i>");
        }
        return null;
    }
}