@*
    ROLE: displays form for coupon series and handles form data for posting to controller
*@

@using Microsoft.AspNetCore.Html;
@model WebApp.ViewModels.CouponSeriesViewModel;

<div class="container">
    <div class="row">
        <h4>
            Create Coupon Series
            <a href="@Url.Action("ListPromotions", "Management")" class="waves-effect waves-light btn-flat btn-default commando-primary-text right">
                @CouponDatabase.Properties.Resources.Btn_Cancel
                <i class="material-icons right">clear</i>
            </a>
        </h4>
    </div>
</div>

@using (Html.BeginForm("GenerateCoupons", "Management", FormMethod.Post, new { role = "form", id = "PromotionForm" }))
{
    @Html.HiddenFor(p => p.PromotionId)

    <div class="form-box">
        <div class="container">
            <div class="@(ViewBag.CommandStatus == "[NOT OK]" ? "form-box__msg form-box__msg-error" : "form-box__msg form-box__msg-success") @(ViewBag.CommandStatus == null ? "hiddendiv" : "")">@ViewBag.CommandStatus  @ViewBag.CommandMessage</div>
            <div class="row u-m-b-remove">
                <div class="row">
                    <div class="input-field col s6">
                        <input placeholder="" id="serialNumber" type="text" disabled>
                        <label class="active" for="serialNumber">Series Number</label>
                    </div>
                </div>
                <div class="input-field date col s6">
                    @Html.EditorFor(p => p.AssignableFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @required = "required", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.AssignableFrom, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "AssignableFrom", true)
                </div>
                <div class="input-field date col s6">
                    @Html.EditorFor(p => p.AssignableUntil, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @required = "required", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.AssignableUntil, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "AssignableUntil", true)
                </div>
                <div class="input-field date col s6 u-m-b-remove">
                    @Html.EditorFor(p => p.RedeemableFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @required = "required", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.RedeemableFrom, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "RedeemableFrom", true)
                </div>
                <div class="input-field date col s6 u-m-b-remove">
                    @Html.EditorFor(p => p.RedeemableUntil, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @required = "required", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.RedeemableUntil, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "RedeemableUntil", true)
                </div>
            </div>
            <div class="row">
                <div class="col s12">
                    <p class="section-headline u-m-t-remove">Current Status</p>
                    <div class="radio-buttons-wrapper">
                        <input type="radio" class="radio-button-group" name="currentStatus" value="1" id="button1" checked />
                        <label for="button1">Created</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="2" id="button2" />
                        <label for="button2">Issued</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="3" id="button3" disabled />
                        <label for="button3">Redeemed</label>
                        <input type="radio" class="radio-button-group" name="currentStatus" value="4" id="button4" />
                        <label for="button4">Canceled</label>
                    </div>
                </div>
            </div>

            <!-- options -->
            <div class="row">
                <div class="col s12">
                    <div class="nav-extended">
                        <div class="nav-content">
                            <ul class="tabs-section tabs-transparent tabs-coupons">
                                <li id="tab-init" class="tab first tab-coupon"><a class="active" href="#coupon-generate">Generate</a></li>
                                <li class="tab last tab-coupon"><a href="#coupon-import">Import</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /options -->
            <!-- generate form -->
            <partial name="_SeriesGenerate" />

            <!-- import form -->
            <partial name="_SeriesImport" />

        </div>
    </div>
}

<script src="~/js/calendar.js" asp-append-version="true"></script>
<script>
    $(document).ready(function () {
        ///////
        // init date picker
        ///
        $('.calendar').calendar().change(function (e) {
            // validate date format
            // TODO: regex should be changed depending on locale

            var input = $(this);
            var re = /^[0-9]{2}.[0-9]{2}.[0-9]{4}$/;
            var valid = re.test(e.target.value);
            if (valid) {
                input.removeClass("invalid").addClass("valid");
            }
            else {
                input.removeClass("valid").addClass("invalid");
            }
        });
        ///////
        // init form tabs
        ///
        $(".tabs-section").tabs({ swipeable: true });

        $("button[data-position='bottom']").tooltip();

        $(".btn-subtract").click(function () {
            var input = $(this).next(".input-field").children("input");
            var inputVal = input.val();
            if (inputVal == "" || input == 0) {
                input.val(0);
            } else {
                input.val(inputVal - 1);
            }
        });

        $(".btn-add").click(function () {
            var input = $(this).prev(".input-field").children("input");
            var inputVal = input.val();

            if (inputVal == "") {
                input.val(1);
            } else {
                input.val(parseInt(inputVal) + 1);
            }
        });
        // TODO: coupon sample generator
    });

</script>

@functions{
    /// <summary>
    /// Validation messages helper
    /// </summary>
    /// <param name="viewData">Context</param>
    /// <param name="property">Model property</param>
    /// <param name="date">Bool for date input validation</param>
    /// <returns>Icon displaying validation messages inside tooltip</returns>
    /// <remarks>If date input, it returns an icon</remarks>
    public static HtmlString ValidationHelper(ViewDataDictionary context, string property, bool date)
    {
        if (context.ModelState[property] != null && context.ModelState[property].Errors.Any())
        {
            string msg = "";
            for (int i = 0; i < context.ModelState[property].Errors.Count; i++)
            {
                msg += context.ModelState[property].Errors[i].ErrorMessage;
            }
            msg.Trim();

            return new HtmlString(@"<i class='material-icons suffix validation-error' data-position='bottom' data-tooltip='" + msg + "'>warning</i>");
        }
        else if (date)
        {
            return new HtmlString(@"<i class='material-icons suffix date-icon'>event</i>");
        }
        return null;
    }
}