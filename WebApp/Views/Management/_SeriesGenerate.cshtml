@*
    ROLE: displays part of form that handles generating coupon series
*@

@model WebApp.ViewModels.CouponSeriesViewModel;

    <section id="coupon-generate">
        <div class="row">
            <div class="col s12">
                <h5 class="section u-m-t-remove">Coupon Format</h5>
            </div>
            <div class="input-field col s3">
                @Html.EditorFor(p => p.Prefix, new { htmlAttributes = new { @type = "text", placeholder = "", @autocomplete = "off", id = "input_prefix", onkeydown = "updateExampleCoupon()", onkeyup = "updateExampleCoupon()", dataVal = true } })
                @Html.LabelFor(p => p.Prefix, new { htmlAttributes = new { @class = "active" } })
                @Html.ValidationMessageFor(p => p.Prefix)
                <i class='material-icons suffix validation-error'>warning</i>
                <p class="checkbox-hover">
                    <label>
                        @Html.CheckBoxFor(p => p.CouponWithLetters, new { @class = "filled-in", id = "chb_CouponWithLetters", onclick = "updateExampleCoupon()", @checked = true })
                        <span>@CouponDatabase.Properties.Resources.SeriesGenerate_UseLetters</span>
                    </label>
                </p>
            </div>
            <div class="input-field col s3">
                @Html.EditorFor(p => p.Suffix, new { htmlAttributes = new { @type = "text", placeholder = "", @autocomplete = "off", id = "input_suffix", onkeydown = "updateExampleCoupon()", onkeyup = "updateExampleCoupon()", dataVal = true } })
                @Html.LabelFor(p => p.Suffix, new { htmlAttributes = new { @class = "active" } })
                @Html.ValidationMessageFor(p => p.Suffix)
                <i class='material-icons suffix validation-error'>warning</i>
                <p class="checkbox-hover">
                    <label>
                        @Html.CheckBoxFor(p => p.CouponWithNumbers, new { @class = "filled-in", id = "chb_CouponWithNumbers", onclick = "updateExampleCoupon()", @checked = true })
                        <span>@CouponDatabase.Properties.Resources.SeriesGenerate_UseNumbers</span>
                    </label>
                </p>
            </div>
            <div class="col s6" style="white-space:nowrap">
                <button type="button" class="waves-effect waves-light btn-flat btn-default btn-subtract commando-primary-text left u-m-t-md-btnGroup" onclick="updateExampleCoupon('buttonRemove');"><i class="material-icons">remove</i></button>
                <div class="input-field col s4">
                    @Html.EditorFor(p => p.CouponMaxLength, new { htmlAttributes = new { value = "8", @type = "number", placeholder = "", @autocomplete = "off", id = "input_length", onchange = "updateExampleCoupon()", dataVal = true, min = 8, max = 20 } })
                    @Html.LabelFor(p => p.CouponMaxLength, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.CouponMaxLength)
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
                <button type="button" class="waves-effect waves-light btn-flat btn-default btn-add commando-primary-text u-m-l-sm u-m-t-md-btnGroup" onclick="updateExampleCoupon('buttonAdd')"><i class="material-icons">add</i></button>
            </div>
        </div>
        <div class="row u-m-t-md">
            <div class="input-field col s6">
                <input placeholder="" class="example-coupon" type="text" id="exampleCoupon" disabled>
                <label class="active" for="example">@CouponDatabase.Properties.Resources.SeriesGenerate_ExampleCoupon</label>
            </div>
            <div class="col s6" style="white-space:nowrap">
                <button type="button" class="waves-effect waves-light btn-flat btn-default btn-subtract commando-primary-text left u-m-t-md-btnGroup" id="btn-substract"><i class="material-icons">remove</i></button>
                <div class="input-field col s4">
                    @Html.EditorFor(p => p.NumberOfCoupons, new { htmlAttributes = new { value = "1", Value = "1", @type = "number", placeholder = "", @autocomplete = "off", dataVal = true, id = "coupon_number", min = 1, max = 100000 }, @Value = "1" })
                    @Html.LabelFor(p => p.NumberOfCoupons, new { htmlAttributes = new { @class = "active" } })
                    @Html.ValidationMessageFor(p => p.NumberOfCoupons)
                    <i class='material-icons suffix validation-error'>warning</i>
                </div>
                <button type="button" class="waves-effect waves-light btn-flat btn-default btn-add commando-primary-text u-m-l-sm u-m-t-md-btnGroup" id="btn-add"><i class="material-icons">add</i></button>
            </div>
        </div>
        <div class="row">
            <div id="file-name-holder" class="input-field date col s12">
                <input id="file-name" placeholder="" class="" type="text" disabled />
            </div>
            <div class=" col s12">
                <div class="file-field-input input-field">
                    <button id="btn-file-input" type="button" class="waves-effect waves-light btn-flat btn-default-primary">
                        <i class="material-icons left">file_upload</i>
                        @CouponDatabase.Properties.Resources.Btn_SelectFile
                    </button>
                    <input id="file-input1" type="file" name="file" asp-for="file" accept=".xls, .xlsx, .csv" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col s12">
                @Html.HiddenFor(i => i.CouponCreation, new { htmlAttributes = new { value = (int)@CouponDatabase.Lifecycle.CouponCreationEnum.Generate, Value = (int)@CouponDatabase.Lifecycle.CouponCreationEnum.Generate } })
                <button type="submit" class="waves-effect waves-light btn-flat btn-primary u-m-r-md" id="btn-generate">
                    <i class="material-icons update-icon left">check</i>
                    @CouponDatabase.Properties.Resources.Btn_Generate
                </button>
            </div>
        </div>
    </section>

    <script>
    $(document).ready(function () {
        $("#coupon_number").val($("#coupon_number").attr('min'));
        $("#input_length").val($("#input_length").attr('min'));
        updateExampleCoupon();

        var fileInput = $("#file-input1");
        var fileBtn = $("#btn-file-input");
        var fileName = $("#file-name");
        var fileNameHolder = $("#file-name-holder");

        fileBtn.click(function () {
            fileInput.click();
        })
        // display name
        fileInput.on('change', function () {
            var name = $(this).val().split('\\').pop();
            var replaceFile = '<i class="material-icons left">file_upload</i>' + '@CouponDatabase.Properties.Resources.Btn_ReplaceFile';
            var btnLabel = fileBtn.html();

            $("#coupon_number").attr("disabled", true);
            $("#btn-add").attr("disabled", true);
            $("#btn-substract").attr("disabled", true);

            if (name && !btnLabel.includes(replaceFile)) {
                fileBtn.html(replaceFile);
                fileNameHolder.show('slow');
            }
            fileName.val(name);
        })

        $("#btn-generate").click(function () {
            document.getElementById('CouponCreation').value = "1";
        })
    });

    // updates sample coupon
    function updateExampleCoupon(delay = "") {
        var pref = $('#input_prefix').val();
        var suf = $('#input_suffix').val();
        var len = parseInt($('#input_length').val());
        var type = "";

        // when clicking on buttons add and remove value of len is equal to the value before clicking on butten
        if (delay == "buttonRemove") len--;
        if (delay == "buttonAdd") len++;

        if (pref.length + suf.length >= len) {
            $('#input_prefix').prop("readonly", true);
            $('#input_suffix').prop("readonly", true);
        } else {
            $('#input_prefix').prop("readonly", false);
            $('#input_suffix').prop("readonly", false);
        }
        if ($('#chb_CouponWithLetters').is(':checked')
            && !$('#chb_CouponWithNumbers').is(':checked')) {
            type = "str";
        }
        else if (!$('#chb_CouponWithLetters').is(':checked')
            && $('#chb_CouponWithNumbers').is(':checked')) {
            type = "num";
        } else if (!$('#chb_CouponWithLetters').is(':checked')
            && !$('#chb_CouponWithNumbers').is(':checked')) {
            type = "none";
        } else {
            type = "all";
        }

        len = len - pref.length - suf.length;
        $("#exampleCoupon").val(pref + generateString(type, len) + suf);
    }
    // generates random string dpending on type and length
    function generateString(type, len) {
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        if (type == "str") characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        else if (type == "num") characters = '0123456789';
        else if (type == "none") characters = '';
        var charactersLength = characters.length;

        for ( var i = 0; i < len; i++ ) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }
    </script>