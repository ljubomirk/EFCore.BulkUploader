@*
    ROLE: displays promotion create/edit form and handles data for posting to controller
*@

@using Microsoft.AspNetCore.Html;
@model WebApp.ViewModels.PromotionDetailsViewModel;


@using (Html.BeginForm("SavePromotion", "Management", FormMethod.Post, new { role = "form", id = "PromotionForm" }))
{
    @Html.HiddenFor(p => p.Promotion.Id)
    <div class="form-box">
        <div class="container">
            <!-- top form return msg -->
            <div class="@(ViewBag.CommandStatus == "[ERROR]" ? "form-box__msg form-box__msg-error" : "form-box__msg form-box__msg-success") @(ViewBag.CommandStatus == null ? "hiddendiv" : "")">@ViewBag.CommandStatus  @ViewBag.CommandMessage</div>

            <!-- input fields -->
            <div class="row">
                <div class="row">
                    <div class="input-field date col s12 m6">
                        @Html.EditorFor(p => p.Promotion.Code, new { htmlAttributes = new { @class = "validate", @type = "text", placeholder = "", @autocomplete = "off", dataVal = true, } })
                        @Html.LabelFor(p => p.Promotion.Code, new { htmlAttributes = new { @class = "active" } })
                        @ValidationHelper(ViewData, "Promotion.Code", false)
                    </div>
                    <div class="input-field col s12 m6">
                        <div class="switch right u-m-t-sm">
                            <label>
                                Disabled
                                @Html.CheckBoxFor(p => p.Promotion.Enabled)
                                <span class="lever"></span>
                                Enabled
                            </label>
                        </div>
                    </div>
                </div>
                <div class="input-field col s12 m6">
                    @Html.EditorFor(p => p.Promotion.ValidFrom, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.Promotion.ValidFrom, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "Promotion.ValidFrom", true)
                </div>
                <div class="input-field col s12 m6">
                    @Html.EditorFor(p => p.Promotion.ValidTo, new { htmlAttributes = new { @class = "calendar", @type = "text", placeholder = "", @autocomplete = "off" } })
                    @Html.LabelFor(p => p.Promotion.ValidTo, new { htmlAttributes = new { @class = "active" } })
                    @ValidationHelper(ViewData, "Promotion.ValidTo", true)
                </div>
                <div class="col s12">
                    <p class="u-m-t-remove">
                        <label id="chk-endDate">
                            <input type="checkbox" class="filled-in" id="toggle-validTo" />
                            <span>@CouponDatabase.Properties.Resources.Promotion_SetEndDateChkLabel</span>
                        </label>
                    </p>
                </div>
            </div>
            <!-- /input fields -->
            <!-- checkboxes -->
            <div class="row">
                <!-- IssuerChannels -->
                <div class="col s12 m6">
                    <p class="section-headline">@Html.DisplayNameFor(m => m.IssuerChannels)</p>
                    @for (int i = 0; i < Model.IssuerChannels.Count; i++)
                    {
                        <p class="checkbox-hover">
                            <label>
                                @Html.CheckBoxFor(c => c.IssuerChannels[i].Checked, new { @class = "filled-in" })
                                <span>@Html.DisplayFor(c => c.IssuerChannels[i].Label)</span>
                                @Html.HiddenFor(c => c.IssuerChannels[i].Id)
                                @Html.HiddenFor(c => c.IssuerChannels[i].Label)
                            </label>
                        </p>
                    }
                </div>
                <!-- /IssuerChannels -->
                <!-- AwardChannels -->
                <div class="col s12 m6">
                    <p class="section-headline">@Html.DisplayNameFor(m => m.AwardChannels)</p>
                    @for (int i = 0; i < Model.AwardChannels.Count; i++)
                    {
                        <p class="checkbox-hover">
                            <label>
                                @Html.CheckBoxFor(c => c.AwardChannels[i].Checked, new { @class = "filled-in" })
                                <span>@Html.DisplayFor(c => c.AwardChannels[i].Label)</span>
                                @Html.HiddenFor(c => c.AwardChannels[i].Id)
                                @Html.HiddenFor(c => c.AwardChannels[i].Label)
                            </label>
                        </p>
                    }
                </div>
                <!-- /AwardChannels -->
                <!-- Properties -->
                <div class="col s12">
                    <p class="section-headline u-m-b-remove">@Html.DisplayNameFor(m => m.Properties)</p>
                </div>
                <div class="col s12 two-cols">
                    @for (int i = 0; i < Model.Properties.Count; i++)
                    {
                        <p class="checkbox-hover">
                            <label>
                                @Html.CheckBoxFor(c => c.Properties[i].Checked, new { @class = "filled-in" })
                                <span>@Html.DisplayFor(c => c.Properties[i].Label)</span>
                                @Html.HiddenFor(c => c.Properties[i].Id)
                                @Html.HiddenFor(c => c.Properties[i].Label)
                            </label>
                        </p>
                    }
                </div>
                <!-- /Properties -->
            </div>
            <!-- /checkboxes -->
            <!-- actions -->
            <div class="row u-m-t-xl">
                <div class="col s12">
                    @if (Model.Promotion.Id == 0)
                    {
                        <button type="submit" class="waves-effect waves-light btn-flat commando-primary white-text u-m-r-md">
                            <i class="material-icons left">check</i>
                            @CouponDatabase.Properties.Resources.Btn_Create
                        </button>
                        <a href="@Url.Action("AddCouponSeries","Management")" class="waves-effect waves-light btn-flat btn-default-primary">
                            <i class="material-icons left">arrow_forward</i>
                            @CouponDatabase.Properties.Resources.Btn_CreateAndAddSeries
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Action("AddCouponSeries","Management",  new { id = Model.Promotion.Id })" class="waves-effect waves-light btn-flat commando-primary white-text u-m-r-md">
                            <i class="material-icons left">add</i>
                            @CouponDatabase.Properties.Resources.Btn_AddSeries
                        </a>
                        <button type="submit" class="waves-effect waves-light btn-flat btn-default btn-primary-text">
                            <i class="material-icons left">save</i>
                            @CouponDatabase.Properties.Resources.Btn_SaveChanges
                        </button>
                        <a href="@Url.Action("EditPromotion","Management", new { id = Model.Promotion.Id })" class="waves-effect waves-light btn-flat btn-danger right">
                            <i class="material-icons left">undo</i>
                            @CouponDatabase.Properties.Resources.Btn_ResetChanges
                        </a>
                    }
                </div>
            </div>
            <!-- /actions -->
        </div>
    </div>
}

<script src="~/js/calendar.js" asp-append-version="true"></script>
<script>
    $(document).ready(function () {

        // enable end date input field
        // - on first render, check state and set input style
        handleValidTo($("#Promotion_ValidTo").val())
        // - state check on click
        $("label#chk-endDate").click(function () {
            handleValidTo($("input", this).prop("checked"))
        })

        // enable promotion if on edit
        $("#action-enable").click(function () {
            console.log("evo ga na")
            var id = $(this).attr("data-id");
            if (id) {
                var val = $(this).attr("data-value");

                if (val == "True") val = "False";
                else val = "True";

                var url = "@Url.Action("Enable", "Management")" +
                    encodeURI("?id=" + id + "&enable=" + val);

                // wait for the automation to finish
                setTimeout(function () {
                    window.location.assign(url)
                }, 500);
            }
        })

        function handleValidTo(condition) {
            if (condition) {
                $("#Promotion_ValidTo").prop("disabled", false);
                $("#toggle-validTo").prop("checked", true);
                $("#icon-endDate").removeClass("disabled");
            } else {
                $("#Promotion_ValidTo").val("");
                $("#Promotion_ValidTo").removeClass("valid invalid");
                $("#Promotion_ValidTo").prop("disabled", true);
                $("#toggle-validTo").prop("checked", false);
                $("#icon-endDate").addClass("disabled");
            }
        }


        @*// ajax call for form submit
        $('form').submit(function (e) {
            e.preventDefault();
            var inputs = $('input');
            var data = new FormData();

            for (var i = 0; i < inputs.length; i++) {
                var key = inputs[i].name;
                var val = inputs[i].value;
                if (key) {
                    data.append(key, val);
                }
            }

            var object = {};
            data.forEach(function(value, key){
                object[key] = value;
            });
            console.log(object);

           $.ajax({
                type: "POST",
                url: '@Url.Action("SavePromotion", "Management")',
                data: data,
                processData: false,
                contentType: false,
                success: function () {
                    alert("jej");
                }
            })
        })*@
    });
</script>
@functions{
    /// <summary>
    /// Validation messages helper
    /// </summary>
    /// <param name="viewData">Context</param>
    /// <param name="property">Model property</param>
    /// <param name="date">Bool for date input validation</param>
    /// <returns>Icon displaying validation messages inside tooltip</returns>
    /// <remarks>If date input, it returns an icon</remarks>
    public static HtmlString ValidationHelper(ViewDataDictionary context, string property, bool date)
    {
        if (context.ModelState[property] != null && context.ModelState[property].Errors.Any())
        {
            string msg = "";
            for (int i = 0; i < context.ModelState[property].Errors.Count; i++)
            {
                msg += context.ModelState[property].Errors[i].ErrorMessage;
            }
            msg.Trim();

            return new HtmlString(@"<i class='material-icons suffix validation-error' data-position='bottom' data-tooltip='" + msg + "'>warning</i>");
        }
        else if (date)
        {
            return new HtmlString(@"<i class='material-icons suffix date-icon'>event</i>");
        }
        return null;
    }
}