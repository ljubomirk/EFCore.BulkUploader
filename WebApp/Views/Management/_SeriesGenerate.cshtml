@*
    ROLE: displays part of form that handles generating coupon series
*@

@model WebApp.ViewModels.CouponSeriesViewModel;

<section id="coupon-generate">
    <div class="row">
        <div class="col s12">
            <h5 class="section u-m-t-remove">Coupon Format</h5>
        </div>
        <div class="input-field col s3">
            @Html.EditorFor(p => p.Prefix, new { htmlAttributes = new { @type = "text", placeholder = "", @autocomplete = "off", id = "input_prefix", onkeyup = "updateExampleCoupon()", dataVal = true } })
            @Html.LabelFor(p => p.Prefix, new { htmlAttributes = new { @class = "active" } })
            @Html.ValidationMessageFor(p => p.Prefix)
            <i class='material-icons suffix validation-error'>warning</i>
            <p class="checkbox-hover">
                <label>
                    @Html.CheckBoxFor(p => p.CouponWithLetters, new { @class = "filled-in", id = "chb_CouponWithLetters", onclick = "updateExampleCoupon()", @checked = true })
                    <span>@CouponDatabase.Properties.Resources.SeriesGenerate_UseLetters</span>
                </label>
            </p>
        </div>
        <div class="input-field col s3">
            @Html.EditorFor(p => p.Suffix, new { htmlAttributes = new { @type = "text", placeholder = "", @autocomplete = "off", id = "input_suffix", onkeyup = "updateExampleCoupon()", dataVal = true } })
            @Html.LabelFor(p => p.Suffix, new { htmlAttributes = new { @class = "active" } })
            @Html.ValidationMessageFor(p => p.Suffix)
            <i class='material-icons suffix validation-error'>warning</i>
            <p class="checkbox-hover">
                <label>
                    @Html.CheckBoxFor(p => p.CouponWithNumbers, new { @class = "filled-in", id = "chb_CouponWithNumbers", onclick = "updateExampleCoupon()", @checked = true })
                    <span>@CouponDatabase.Properties.Resources.SeriesGenerate_UseNumbers</span>
                </label>
            </p>
        </div>
        <div class="col s6">
            <button type="button" class="waves-effect waves-light btn-flat btn-default btn-subtract commando-primary-text left u-m-t-md-btnGroup"><i class="material-icons">remove</i></button>
            <div class="input-field col s4">
                @Html.EditorFor(p => p.CouponMaxLength, new { htmlAttributes = new {value= "4", @type = "number", placeholder = "", @autocomplete = "off", id = "input_length", onchange = "updateExampleCoupon()", dataVal = true, min = 4, max = 20 } })
                @Html.LabelFor(p => p.CouponMaxLength, new { htmlAttributes = new { @class = "active" } })
                @Html.ValidationMessageFor(p => p.CouponMaxLength)
                <i class='material-icons suffix validation-error'>warning</i>
            </div>
            <button type="button" class="waves-effect waves-light btn-flat btn-default btn-add commando-primary-text u-m-l-sm u-m-t-md-btnGroup"><i class="material-icons">add</i></button>
        </div>
    </div>
    <div class="row u-m-t-md">
        <div class="input-field col s6">
            <input placeholder="" class="example-coupon" type="text" id="exampleCoupon" disabled>
            <label class="active" for="example">Example Coupon</label>
        </div>
        <div class="col s6">
            <button type="button" class="waves-effect waves-light btn-flat btn-default btn-subtract commando-primary-text left u-m-t-md-btnGroup" onclick="updateExampleCoupon();"><i class="material-icons">remove</i></button>
            <div class="input-field col s4">
                @Html.EditorFor(p => p.NumberOfCoupons, new { htmlAttributes = new {value = "1", Value = "1", @type = "number", placeholder = "", @autocomplete = "off", dataVal = true, id = "coupon_number", min = 1, max = 100000  }, @Value = "1" })
                @Html.LabelFor(p => p.NumberOfCoupons, new { htmlAttributes = new { @class = "active" } })
                @Html.ValidationMessageFor(p => p.NumberOfCoupons)
                <i class='material-icons suffix validation-error'>warning</i>
            </div>
            <button type="button" class="waves-effect waves-light btn-flat btn-default btn-add commando-primary-text u-m-l-sm u-m-t-md-btnGroup" onclick="updateExampleCoupon();"><i class="material-icons">add</i></button>
        </div>
    </div>
    <div class="row">
        <div class="col s12">
            <button type="submit" class="waves-effect waves-light btn-flat btn-primary u-m-r-md">
                <i class="material-icons update-icon left">check</i>
                @CouponDatabase.Properties.Resources.Btn_Generate
            </button>
        </div>
    </div>
</section>

<script>
     $(document).ready(function () {
        updateExampleCoupon();
        $("#coupon_number").val($("#coupon_number").attr('min'));
        $("#input_length").val($("#input_length").attr('min'));
    });

    // updates sample coupon
    function updateExampleCoupon() {
        var pref = $('#input_prefix').val();
        var suf = $('#input_suffix').val();
        var len = 6;
        var type = "";

        if ($('#chb_CouponWithLetters').is(':checked')
            && !$('#chb_CouponWithNumbers').is(':checked')) {
            type = "str";
        }
        else if (!$('#chb_CouponWithLetters').is(':checked')
            && $('#chb_CouponWithNumbers').is(':checked')) {
            type = "num";
        } else if (!$('#chb_CouponWithLetters').is(':checked')
            && !$('#chb_CouponWithNumbers').is(':checked')) {
            type = "none";
        } else {
            type = "all";
        }
        
        $("#exampleCoupon").val(pref + generateString(type, len) + suf);
    }
    // generates random string dpending on type and length
    function generateString(type, len) {
        var result = '';
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        if (type == "str") characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        else if (type == "num") characters = '0123456789';
        else if (type == "none") characters = '';
        var charactersLength = characters.length;

        for ( var i = 0; i < len; i++ ) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }
</script>